# -*- coding: utf-8 -*-
"""MNII-Acústica

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gxk0ZniFijPfpXBr1tQsABEKhdh8IoI3

Preàmbul
"""

import numpy as np
import matplotlib.pyplot as plt

"""Preparat per GIFs"""

N=100                                               #Nombre de quadres en el mallat espaial
γ=0.5                                               #Factor dt/dx
tmax=1*34.32                                        #Temps d'evolució del sistema (1s)*factor d'adimensionalització
frame=0.01                                          #Temps que volem entre frames de l'animació (en s)

dt=γ/N                                              #Interval de temps, dt=γdx=γ*1/N

tick=np.linspace(0,N,11)                            #Matrius que farem servir per ajustar els eixos de coordenades
real_pos=tick/10
#Matrius de partida, pressió (relativa a la atmosfèrica) zero
P_old=np.zeros([N+1,N+1])
P_now=np.zeros([N+1,N+1])
P_new=np.zeros([N+1,N+1])

#Construïm els obstacles
obs=np.zeros([N+1,N+1])
#Paret esquerra
obs[int(0.1*N):int(0.4*N),int(0.1*N)]=1000
obs[int(0.6*N):int(0.9*N),int(0.1*N)]=1000
#Paret superior
obs[int(0.1*N),int(0.1*N):int(0.4*N)]=1000
obs[int(0.1*N),int(0.6*N):int(0.9*N)]=1000
#Paret dreta
obs[int(0.9*N),int(0.1*N):int(0.9*N)+1]=1000
#Paret inferior
obs[int(0.1*N):int(0.9*N),int(0.9*N)]=1000
#Paret reservat
obs[int(0.3*N),int(0.1*N):int(0.4*N)]=1000
obs[int(0.2*N):int(0.3*N),int(0.4*N-1)]=1000
#Cuina
obs[int(0.75*N):int(0.9*N),int(0.5*N):int(0.9*N)]=1000
obs[int(0.7*N):int(0.75*N),int(0.8*N):int(0.9*N)]=1000

#Construïm el panel, si no volem panel basta amb comentar la segona línea
panel=np.zeros([N+1,N+1])
#panel[int(0.4*N):int((0.7)*N),int(0.5*N)]=1000

for n in range(0,int(tmax/dt)):                      #Loop temporal
#Generem el soroll a les fonts
  P_now[int(0.5*N),int(0.3*N)]=10**(np.random.normal(6,1)/2) 
  P_now[int(0.3*N),int(0.7*N)]=10**(np.random.normal(6,1)/2)
  P_now[int(0.7*N),int(0.3*N)]=10**(np.random.normal(6,1)/2)
  P_now[int(0.5*N),int(0.7*N)]=10**(np.random.normal(9,1.5)/2)
#Loop espaial
  for i in range(1,N):
    for j in range(1,N):
      if obs[i,j]+panel[i,j]==0:                     #Si a la posició no es troba un obstacle
        P_new[i,j]=2*P_now[i,j]-P_old[i,j]+γ**2*(P_now[i+1,j]+P_now[i-1,j]+P_now[i,j+1]+P_now[i,j-1]-4*P_now[i,j])
#Per les caselles de les aristes només ens cal l'índex i, per tant les traiem del loop per optimitzar
    P_new[0,i]=2*P_now[0,i]-P_old[0,i]+γ**2*(P_now[0,i+1]+P_now[0,i-1]-2*P_now[0,i])
    P_new[N,i]=2*P_now[N,i]-P_old[N,i]+γ**2*(P_now[N,i+1]+P_now[N,i-1]-2*P_now[N,i])
    P_new[i,0]=2*P_now[i,0]-P_old[i,0]+γ**2*(P_now[i+1,0]+P_now[i-1,0]-2*P_now[i,0])
    P_new[i,N]=2*P_now[i,N]-P_old[i,N]+γ**2*(P_now[i+1,N]+P_now[i-1,N]-2*P_now[i,N])
#Actualitzem les matrius
  P_old=P_now
  P_now=P_new
#Si t=n*dt és multiple de frame_adimensional=frame*34.32, representem el sistema
  if n%int(frame*34.32/dt)==0:
    fig = plt.subplots(1,1, figsize=(10,10))
  
    ax = plt.axes()
    ax.set_xlabel('x (m)')
    ax.set_ylabel('y (m)')

    plt.imshow(10*np.log10(P_now**2+0.00001)+obs+panel,cmap="gnuplot2", vmin = 0, vmax = 100)
    plt.axes(ax)
    plt.colorbar()
    plt.title('Intensitat acústica (dB) en funció de la posició i el temps')
    ax.text(1,3.5,'$t=$'+str(round(n*dt/34.32,2))+'s',bbox=dict(facecolor='white'),color='black')

    ax.set_xticks(ticks=tick)
    ax.set_xticklabels(labels=real_pos)
    ax.set_yticks(ticks=tick)
    ax.set_yticklabels(labels=real_pos)

    plt.show()