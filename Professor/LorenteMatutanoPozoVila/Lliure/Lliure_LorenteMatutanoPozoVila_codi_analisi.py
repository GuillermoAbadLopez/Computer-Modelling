# -*- coding: utf-8 -*-
"""MNII-Acústica

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gxk0ZniFijPfpXBr1tQsABEKhdh8IoI3

Preàmbul
"""

import numpy as np
import matplotlib.pyplot as plt

"""Preparat per anàlisi"""

N=100               #Nombre de talls en x
γ=0.5
tmax=34.32

dt=γ/N

#Obstacles
obs=np.zeros([N+1,N+1])
#paret esq
obs[int(0.1*N):int(0.4*N),int(0.1*N)]=1000
obs[int(0.6*N):int(0.9*N),int(0.1*N)]=1000
#paret sup
obs[int(0.1*N),int(0.1*N):int(0.4*N)]=1000
obs[int(0.1*N),int(0.6*N):int(0.9*N)]=1000
#paret drt
obs[int(0.9*N),int(0.1*N):int(0.9*N)+1]=1000
#paret inf
obs[int(0.1*N):int(0.9*N),int(0.9*N)]=1000
#reservat
obs[int(0.3*N),int(0.1*N):int(0.4*N)]=1000
obs[int(0.2*N):int(0.3*N),int(0.4*N-1)]=1000
#cuina
obs[int(0.75*N):int(0.9*N),int(0.5*N):int(0.9*N)]=1000
obs[int(0.7*N):int(0.75*N),int(0.8*N):int(0.9*N)]=1000

Iav=np.array([])
#Loop de posicions de 
for x in np.linspace(0.2,0.45,26):
  P_old=np.zeros([N+1,N+1])
  P_now=np.zeros([N+1,N+1])
  P_new=np.zeros([N+1,N+1])
#Construïm el panel
  panel=np.zeros([N+1,N+1])
  panel[int(x*N):int((0.3+x)*N),int(0.5*N)]=1000

  Imax=np.array([])                                   #Matriu on guardarem el punt màxim d'intensitat durant els últims 0.1s de simulació

  for n in range(0,int(tmax/dt)):                     #Loop temporal
    P_now[int(0.5*N),int(0.3*N)]=10**(np.random.normal(6,1)/2)
    P_now[int(0.3*N),int(0.7*N)]=10**(np.random.normal(6,1)/2)
    P_now[int(0.7*N),int(0.3*N)]=10**(np.random.normal(6,1)/2)
    P_now[int(0.5*N),int(0.7*N)]=10**(np.random.normal(9,1.5)/2)
#Loop espaial
    for i in range(1,N):
      for j in range(1,N):
        if obs[i,j]+panel[i,j]==0:                    #Si a la posició no es troba un obstacle
          P_new[i,j]=2*P_now[i,j]-P_old[i,j]+γ**2*(P_now[i+1,j]+P_now[i-1,j]+P_now[i,j+1]+P_now[i,j-1]-4*P_now[i,j])
#Per les caselles de les aristes només ens cal l'índex i, per tant les traiem del loop per optimitzar
      P_new[0,i]=2*P_now[0,i]-P_old[0,i]+γ**2*(P_now[0,i+1]+P_now[0,i-1]-2*P_now[0,i])
      P_new[N,i]=2*P_now[N,i]-P_old[N,i]+γ**2*(P_now[N,i+1]+P_now[N,i-1]-2*P_now[N,i])
      P_new[i,0]=2*P_now[i,0]-P_old[i,0]+γ**2*(P_now[i+1,0]+P_now[i-1,0]-2*P_now[i,0])
      P_new[i,N]=2*P_now[i,N]-P_old[i,N]+γ**2*(P_now[i+1,N]+P_now[i-1,N]-2*P_now[i,N])
#Actualitzem les matrius
    P_old=P_now
    P_now=P_new
    if n*dt>=0.9*tmax:                                #En l'últim 10% de temps, anotem la intensitat màxima al reservat
      P_2=P_now**2
      Imax=np.append(Imax,10*np.log10(np.max(P_2[int(0.1*N):int(0.4*N),int(0.1*N):int(0.4*N)])))
  Iav=np.append(Iav,sum(Imax)/len(Imax))              #Quan acabem, anotem la mitjana de les intensitats màximes en els últims instants
  print(x)                                            #I mostrem x per poder seguir el progrés de la simulació en temps real

plt.plot(10*np.linspace(0.1,0.35,26),Iav,color='darkorange',label="Intensitat observada")
plt.plot([1,3.5],[50,50],ls='dashed',color='darkgray',label="Llindar d'acceptació")
plt.xlabel("Distància de la finestra a l'extrem superior del panell (m)")
plt.ylabel('Intensitat sonora al reservat(dB)')
plt.xlim(1,3.5)
plt.legend()

plt.show()